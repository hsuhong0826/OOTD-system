"""
天氣 API 整合模組
使用中央氣象署開放資料 API 取得台灣天氣資訊
"""

import os
from pathlib import Path
import requests
from datetime import datetime, timedelta
from typing import List, Dict, Optional

# 載入環境變數 (僅在本地開發時需要)
if Path(".env").exists():
    from dotenv import load_dotenv

    load_dotenv()

# 中央氣象署 API 金鑰（免費申請：https://opendata.cwa.gov.tw/）
CWA_API_KEY = os.environ.get("CWA_API_KEY", "")

# OpenWeatherMap API 金鑰（備用）
OPENWEATHER_API_KEY = os.environ.get("OPENWEATHER_API_KEY", "")


def get_coordinates(city_name: str) -> Optional[tuple]:
    """取得城市座標（台灣城市對照）"""
    # 台灣主要城市座標對照表
    taiwan_cities = {
        # 新北市區域
        "泰山": (25.0563, 121.4336),
        "板橋": (25.0083, 121.4592),
        "新北": (25.0118, 121.4652),
        "萬華": (25.0320, 121.5000),
        "樹林": (24.9933, 121.4205),
        "三重": (25.0620, 121.4875),
        "新莊": (25.0378, 121.4326),
        "中和": (24.9989, 121.4993),
        "永和": (25.0108, 121.5161),
        "土城": (24.9739, 121.4421),
        "蘆洲": (25.0847, 121.4741),
        "汐止": (25.0674, 121.6423),
        "淡水": (25.1677, 121.4406),
        "瑞芳": (25.1093, 121.8120),
        "三峽": (24.9344, 121.3691),
        "鶯歌": (24.9545, 121.3542),
        "新店": (24.9677, 121.5414),
        "深坑": (25.0024, 121.6170),
        "石碇": (24.9861, 121.6578),
        "坪林": (24.9367, 121.7103),
        "烏來": (24.8657, 121.5495),
        "五股": (25.0829, 121.4389),
        "八里": (25.1498, 121.4012),
        "林口": (25.0776, 121.3903),
        "三芝": (25.2572, 121.5019),
        "石門": (25.2906, 121.5667),
        "金山": (25.2215, 121.6368),
        "萬里": (25.1796, 121.6892),
        "平溪": (25.0259, 121.7395),
        "雙溪": (25.0332, 121.8653),
        "貢寮": (25.0193, 121.9081),
        # 台北市
        "台北": (25.0330, 121.5654),
        "士林": (25.0875, 121.5160),
        "北投": (25.1319, 121.5018),
        "內湖": (25.0826, 121.5907),
        "南港": (25.0527, 121.6063),
        "松山": (25.0496, 121.5779),
        "信義": (25.0330, 121.5770),
        "大安": (25.0263, 121.5436),
        "中山": (25.0636, 121.5260),
        "中正": (25.0320, 121.5200),
        "大同": (25.0632, 121.5155),
        "文山": (24.9889, 121.5706),
        # 基隆市
        "基隆": (25.1276, 121.7392),
        # 桃園市
        "桃園": (24.9936, 121.3010),
        "中壢": (24.9659, 121.2257),
        "平鎮": (24.9444, 121.2164),
        "八德": (24.9404, 121.2967),
        "楊梅": (24.9075, 121.1460),
        "蘆竹": (25.0455, 121.2918),
        "大溪": (24.8804, 121.2865),
        "龍潭": (24.8643, 121.2164),
        "龜山": (25.0407, 121.3540),
        "大園": (25.0606, 121.1969),
        "觀音": (25.0354, 121.0826),
        "新屋": (24.9703, 121.1060),
        "復興": (24.8200, 121.3500),
        # 新竹市
        "新竹": (24.8138, 120.9675),
        # 新竹縣
        "竹北": (24.8387, 121.0052),
        "竹東": (24.7404, 121.0887),
        "新埔": (24.8372, 121.0759),
        "關西": (24.7887, 121.1775),
        "湖口": (24.8998, 121.0388),
        "新豐": (24.9019, 120.9839),
        "峨眉": (24.6883, 121.0094),
        "寶山": (24.7494, 120.9965),
        "北埔": (24.7000, 121.0583),
        "芎林": (24.7711, 121.0750),
        "橫山": (24.7173, 121.1181),
        "尖石": (24.7025, 121.2000),
        "五峰": (24.5967, 121.1100),
        # 苗栗縣
        "苗栗": (24.5602, 120.8214),
        "頭份": (24.6968, 120.8967),
        "竹南": (24.6877, 120.8736),
        "苑裡": (24.4431, 120.6515),
        "通霄": (24.4897, 120.6778),
        "後龍": (24.6127, 120.7863),
        "卓蘭": (24.3100, 120.8267),
        "大湖": (24.4219, 120.8647),
        "公館": (24.5084, 120.8225),
        "銅鑼": (24.4867, 120.7855),
        "南庄": (24.5953, 121.0089),
        "頭屋": (24.5896, 120.8484),
        "三義": (24.4133, 120.7583),
        "西湖": (24.5650, 120.7833),
        "造橋": (24.6369, 120.8500),
        "三灣": (24.6567, 120.9567),
        "獅潭": (24.5383, 120.9217),
        "泰安": (24.4600, 121.0000),
        # 台中市
        "台中": (24.1477, 120.6736),
        "豐原": (24.2569, 120.7233),
        "大里": (24.0992, 120.6773),
        "太平": (24.1245, 120.7239),
        "清水": (24.2643, 120.5694),
        "沙鹿": (24.2368, 120.5686),
        "大甲": (24.3475, 120.6244),
        "東勢": (24.2588, 120.8239),
        "梧棲": (24.2554, 120.5289),
        "烏日": (24.1051, 120.6236),
        "神岡": (24.2569, 120.6631),
        "大肚": (24.1531, 120.5408),
        "大雅": (24.2289, 120.6478),
        "后里": (24.3045, 120.7142),
        "霧峰": (24.0592, 120.6997),
        "潭子": (24.2097, 120.7069),
        "龍井": (24.1928, 120.5433),
        "外埔": (24.3311, 120.6556),
        "和平": (24.2939, 121.0417),
        "石岡": (24.2733, 120.7833),
        "大安": (24.3456, 120.5931),
        "新社": (24.2333, 120.8083),
        # 彰化縣
        "彰化": (24.0518, 120.5161),
        "員林": (23.9589, 120.5742),
        "和美": (24.1100, 120.4961),
        "鹿港": (24.0558, 120.4344),
        "溪湖": (23.9589, 120.4814),
        "二林": (23.9267, 120.4086),
        "田中": (23.8600, 120.5858),
        "北斗": (23.8706, 120.5211),
        "花壇": (24.0264, 120.5436),
        "芬園": (24.0139, 120.6181),
        "大村": (23.9953, 120.5486),
        "永靖": (23.9242, 120.5478),
        "伸港": (24.1550, 120.4983),
        "線西": (24.1317, 120.4686),
        "福興": (24.0406, 120.4433),
        "秀水": (24.0314, 120.5000),
        "埔心": (23.9539, 120.5458),
        "埔鹽": (24.0050, 120.4650),
        "大城": (23.8517, 120.3217),
        "芳苑": (23.9106, 120.3144),
        "竹塘": (23.8889, 120.4328),
        "社頭": (23.8978, 120.5839),
        "二水": (23.8081, 120.6189),
        "田尾": (23.8933, 120.5233),
        "埤頭": (23.8917, 120.4500),
        "溪州": (23.8519, 120.4986),
        # 南投縣
        "南投": (23.9609, 120.6971),
        "埔里": (23.9681, 120.9681),
        "草屯": (23.9742, 120.6800),
        "竹山": (23.7569, 120.6772),
        "集集": (23.8292, 120.7847),
        "名間": (23.8528, 120.6889),
        "鹿谷": (23.7442, 120.7542),
        "中寮": (23.8833, 120.7667),
        "魚池": (23.8950, 120.9386),
        "國姓": (24.0436, 120.8597),
        "水里": (23.8178, 120.8564),
        "信義": (23.7000, 120.8833),
        "仁愛": (24.0333, 121.1333),
        # 雲林縣
        "雲林": (23.7092, 120.4313),
        "斗六": (23.7076, 120.5440),
        "斗南": (23.6789, 120.4794),
        "虎尾": (23.7075, 120.4450),
        "西螺": (23.7975, 120.4669),
        "土庫": (23.6775, 120.3936),
        "北港": (23.5744, 120.2994),
        "古坑": (23.6433, 120.5622),
        "大埤": (23.6608, 120.4344),
        "莿桐": (23.7608, 120.4828),
        "林內": (23.7578, 120.6175),
        "二崙": (23.7850, 120.4158),
        "崙背": (23.7578, 120.3481),
        "麥寮": (23.7536, 120.2517),
        "東勢": (23.6700, 120.2611),
        "褒忠": (23.6939, 120.3144),
        "台西": (23.7028, 120.1958),
        "元長": (23.6483, 120.3153),
        "四湖": (23.6383, 120.2328),
        "口湖": (23.5817, 120.1839),
        "水林": (23.5719, 120.2483),
        # 嘉義市
        "嘉義": (23.4801, 120.4491),
        # 嘉義縣
        "太保": (23.4594, 120.3328),
        "朴子": (23.4650, 120.2475),
        "布袋": (23.3772, 120.1661),
        "大林": (23.6031, 120.4719),
        "民雄": (23.5519, 120.4294),
        "溪口": (23.6011, 120.3958),
        "新港": (23.5544, 120.3456),
        "六腳": (23.4919, 120.2936),
        "東石": (23.4550, 120.1589),
        "義竹": (23.3408, 120.2431),
        "鹿草": (23.4111, 120.3050),
        "水上": (23.4278, 120.3972),
        "中埔": (23.4267, 120.5214),
        "竹崎": (23.5228, 120.5539),
        "梅山": (23.5844, 120.5556),
        "番路": (23.4583, 120.5583),
        "大埔": (23.2950, 120.5933),
        "阿里山": (23.5083, 120.7333),
        # 台南市
        "台南": (22.9997, 120.2270),
        "新營": (23.3106, 120.3169),
        "永康": (23.0264, 120.2572),
        "歸仁": (22.9697, 120.2931),
        "佳里": (23.1650, 120.1772),
        "麻豆": (23.1808, 120.2472),
        "新化": (23.0378, 120.3103),
        "善化": (23.1322, 120.2969),
        "新市": (23.0789, 120.2950),
        "安定": (23.1217, 120.2358),
        "山上": (23.1044, 120.3494),
        "玉井": (23.1242, 120.4600),
        "楠西": (23.1742, 120.4861),
        "南化": (23.0419, 120.4769),
        "左鎮": (23.0569, 120.4061),
        "仁德": (22.9736, 120.2500),
        "關廟": (22.9608, 120.3275),
        "龍崎": (22.9667, 120.3667),
        "官田": (23.1939, 120.3183),
        "六甲": (23.2264, 120.3472),
        "大內": (23.1167, 120.3667),
        "柳營": (23.2778, 120.3128),
        "鹽水": (23.3200, 120.2661),
        "白河": (23.3525, 120.4317),
        "東山": (23.3253, 120.4056),
        "後壁": (23.3667, 120.3594),
        "下營": (23.2358, 120.2650),
        "學甲": (23.2308, 120.1772),
        "西港": (23.1253, 120.2033),
        "七股": (23.1411, 120.1411),
        "將軍": (23.2069, 120.1461),
        "北門": (23.2678, 120.1253),
        "新樓": (23.0017, 120.2133),
        # 高雄市
        "高雄": (22.6273, 120.3014),
        "鳳山": (22.6278, 120.3567),
        "岡山": (22.7967, 120.2953),
        "旗山": (22.8889, 120.4831),
        "美濃": (22.8833, 120.5500),
        "橋頭": (22.7575, 120.3058),
        "燕巢": (22.7917, 120.3611),
        "田寮": (22.8681, 120.3603),
        "阿蓮": (22.8833, 120.3258),
        "路竹": (22.8539, 120.2619),
        "湖內": (22.9058, 120.2039),
        "茄萣": (22.9061, 120.1850),
        "永安": (22.8189, 120.2228),
        "彌陀": (22.7828, 120.2494),
        "梓官": (22.7556, 120.2636),
        "大社": (22.7306, 120.3461),
        "大樹": (22.6917, 120.4300),
        "大寮": (22.5653, 120.3950),
        "林園": (22.5031, 120.4119),
        "仁武": (22.7017, 120.3467),
        "鳥松": (22.6622, 120.3644),
        "小港": (22.5650, 120.3367),
        "前鎮": (22.6056, 120.3103),
        "旗津": (22.5831, 120.2633),
        "鼓山": (22.6556, 120.2806),
        "鹽埕": (22.6239, 120.2856),
        "左營": (22.6778, 120.2942),
        "楠梓": (22.7333, 120.3281),
        "三民": (22.6408, 120.3167),
        "苓雅": (22.6231, 120.3100),
        "新興": (22.6281, 120.3061),
        "前金": (22.6308, 120.2939),
        "內門": (22.9519, 120.4656),
        "杉林": (22.9667, 120.5500),
        "甲仙": (23.0833, 120.5833),
        "六龜": (22.9989, 120.6308),
        "茂林": (22.8867, 120.6581),
        "桃源": (23.1542, 120.7667),
        "那瑪夏": (23.2333, 120.7000),
        # 屏東縣
        "屏東": (22.6820, 120.4881),
        "潮州": (22.5506, 120.5425),
        "東港": (22.4653, 120.4531),
        "恆春": (22.0050, 120.7467),
        "萬丹": (22.5878, 120.4839),
        "長治": (22.6778, 120.5194),
        "麟洛": (22.6508, 120.5275),
        "九如": (22.7408, 120.4881),
        "里港": (22.7778, 120.4944),
        "鹽埔": (22.7542, 120.5681),
        "高樹": (22.8258, 120.5981),
        "萬巒": (22.5708, 120.5650),
        "內埔": (22.6119, 120.5650),
        "竹田": (22.5850, 120.5417),
        "新埤": (22.4697, 120.5500),
        "枋寮": (22.3653, 120.5933),
        "新園": (22.5417, 120.4667),
        "崁頂": (22.5056, 120.5119),
        "林邊": (22.4331, 120.5228),
        "南州": (22.4906, 120.5089),
        "佳冬": (22.4186, 120.5511),
        "琉球": (22.3397, 120.3714),
        "車城": (22.0742, 120.7089),
        "滿州": (22.0167, 120.8433),
        "枋山": (22.2617, 120.6572),
        "三地門": (22.7133, 120.6533),
        "霧台": (22.7417, 120.7333),
        "瑪家": (22.7083, 120.6167),
        "泰武": (22.6000, 120.6333),
        "來義": (22.5333, 120.6667),
        "春日": (22.3750, 120.6333),
        "獅子": (22.2167, 120.7167),
        "牡丹": (22.1333, 120.7833),
        # 宜蘭縣
        "宜蘭": (24.7022, 121.7378),
        "羅東": (24.6769, 121.7714),
        "蘇澳": (24.5958, 121.8542),
        "頭城": (24.8578, 121.8225),
        "礁溪": (24.8261, 121.7711),
        "壯圍": (24.7372, 121.7828),
        "員山": (24.7400, 121.7050),
        "冬山": (24.6378, 121.7931),
        "五結": (24.6850, 121.7989),
        "三星": (24.6619, 121.6433),
        "大同": (24.5667, 121.4167),
        "南澳": (24.4667, 121.8000),
        # 花蓮縣
        "花蓮": (23.9871, 121.6015),
        "鳳林": (23.7486, 121.4522),
        "玉里": (23.3344, 121.3128),
        "新城": (24.1289, 121.6414),
        "吉安": (23.9742, 121.5800),
        "壽豐": (23.8653, 121.5069),
        "光復": (23.6667, 121.4167),
        "豐濱": (23.5981, 121.5133),
        "瑞穗": (23.4986, 121.3778),
        "富里": (23.1806, 121.2500),
        "秀林": (24.1500, 121.4333),
        "萬榮": (23.7167, 121.4000),
        "卓溪": (23.3500, 121.2667),
        # 台東縣
        "台東": (22.7583, 121.1444),
        "成功": (23.0975, 121.3694),
        "關山": (23.0450, 121.1619),
        "卑南": (22.7667, 121.1000),
        "鹿野": (22.9092, 121.1244),
        "池上": (23.1222, 121.2186),
        "東河": (23.2000, 121.3000),
        "長濱": (23.3167, 121.4500),
        "太麻里": (22.6131, 120.9908),
        "大武": (22.3417, 120.8992),
        "綠島": (22.6667, 121.4833),
        "海端": (23.1000, 121.1667),
        "延平": (22.9667, 121.1167),
        "金峰": (22.5833, 120.9500),
        "達仁": (22.2833, 120.8667),
        "蘭嶼": (22.0500, 121.5333),
        # 澎湖縣
        "澎湖": (23.5711, 119.5794),
        "馬公": (23.5667, 119.5833),
        "湖西": (23.5833, 119.6500),
        "白沙": (23.6667, 119.6000),
        "西嶼": (23.6000, 119.5000),
        "望安": (23.3667, 119.5000),
        "七美": (23.2000, 119.4333),
        # 金門縣
        "金門": (24.4492, 118.3765),
        "金城": (24.4333, 118.3167),
        "金湖": (24.4333, 118.4167),
        "金沙": (24.4833, 118.4167),
        "金寧": (24.4500, 118.3333),
        "烈嶼": (24.4333, 118.2333),
        "烏坵": (24.9833, 119.4500),
        # 連江縣（馬祖）
        "連江": (26.1508, 119.9511),
        "南竿": (26.1500, 119.9333),
        "北竿": (26.2167, 120.0000),
        "莒光": (25.9667, 119.9333),
        "東引": (26.3667, 120.5000),
    }

    return taiwan_cities.get(city_name)


def get_cwa_location_name(city_name: str) -> Optional[str]:
    """
    將城市名稱對應到中央氣象署的行政區代碼
    """
    # 中央氣象署縣市名稱對照表
    cwa_location_map = {
        # 新北市
        "泰山": "新北市",
        "板橋": "新北市",
        "新北": "新北市",
        "萬華": "臺北市",
        "樹林": "新北市",
        "三重": "新北市",
        "新莊": "新北市",
        "中和": "新北市",
        "永和": "新北市",
        "土城": "新北市",
        "蘆洲": "新北市",
        "汐止": "新北市",
        "淡水": "新北市",
        "瑞芳": "新北市",
        "三峽": "新北市",
        "鶯歌": "新北市",
        "新店": "新北市",
        "深坑": "新北市",
        "石碇": "新北市",
        "坪林": "新北市",
        "烏來": "新北市",
        "五股": "新北市",
        "八里": "新北市",
        "林口": "新北市",
        "三芝": "新北市",
        "石門": "新北市",
        "金山": "新北市",
        "萬里": "新北市",
        "平溪": "新北市",
        "雙溪": "新北市",
        "貢寮": "新北市",
        # 台北市
        "台北": "臺北市",
        "臺北": "臺北市",
        "士林": "臺北市",
        "北投": "臺北市",
        "內湖": "臺北市",
        "南港": "臺北市",
        "松山": "臺北市",
        "信義": "臺北市",
        "大安": "臺北市",
        "中山": "臺北市",
        "中正": "臺北市",
        "大同": "臺北市",
        "文山": "臺北市",
        # 基隆市
        "基隆": "基隆市",
        # 桃園市
        "桃園": "桃園市",
        "中壢": "桃園市",
        "平鎮": "桃園市",
        "八德": "桃園市",
        "楊梅": "桃園市",
        "蘆竹": "桃園市",
        "大溪": "桃園市",
        "龍潭": "桃園市",
        "龜山": "桃園市",
        "大園": "桃園市",
        "觀音": "桃園市",
        "新屋": "桃園市",
        "復興": "桃園市",
        # 新竹市/縣
        "新竹": "新竹市",
        "竹北": "新竹縣",
        "竹東": "新竹縣",
        "新埔": "新竹縣",
        "關西": "新竹縣",
        "湖口": "新竹縣",
        "新豐": "新竹縣",
        "峨眉": "新竹縣",
        "寶山": "新竹縣",
        "北埔": "新竹縣",
        "芎林": "新竹縣",
        "橫山": "新竹縣",
        "尖石": "新竹縣",
        "五峰": "新竹縣",
        # 苗栗縣
        "苗栗": "苗栗縣",
        "頭份": "苗栗縣",
        "竹南": "苗栗縣",
        "苑裡": "苗栗縣",
        "通霄": "苗栗縣",
        "後龍": "苗栗縣",
        "卓蘭": "苗栗縣",
        "大湖": "苗栗縣",
        "公館": "苗栗縣",
        "銅鑼": "苗栗縣",
        "南庄": "苗栗縣",
        "頭屋": "苗栗縣",
        "三義": "苗栗縣",
        "西湖": "苗栗縣",
        "造橋": "苗栗縣",
        "三灣": "苗栗縣",
        "獅潭": "苗栗縣",
        "泰安": "苗栗縣",
        # 台中市
        "台中": "臺中市",
        "臺中": "臺中市",
        "豐原": "臺中市",
        "大里": "臺中市",
        "太平": "臺中市",
        "清水": "臺中市",
        "沙鹿": "臺中市",
        "大甲": "臺中市",
        "東勢": "臺中市",
        "梧棲": "臺中市",
        "烏日": "臺中市",
        "神岡": "臺中市",
        "大肚": "臺中市",
        "大雅": "臺中市",
        "后里": "臺中市",
        "霧峰": "臺中市",
        "潭子": "臺中市",
        "龍井": "臺中市",
        "外埔": "臺中市",
        "和平": "臺中市",
        "石岡": "臺中市",
        "新社": "臺中市",
        # 彰化縣
        "彰化": "彰化縣",
        "員林": "彰化縣",
        "和美": "彰化縣",
        "鹿港": "彰化縣",
        "溪湖": "彰化縣",
        "二林": "彰化縣",
        "田中": "彰化縣",
        "北斗": "彰化縣",
        # 南投縣
        "南投": "南投縣",
        "埔里": "南投縣",
        "草屯": "南投縣",
        "竹山": "南投縣",
        "集集": "南投縣",
        "名間": "南投縣",
        "鹿谷": "南投縣",
        "中寮": "南投縣",
        "魚池": "南投縣",
        "國姓": "南投縣",
        "水里": "南投縣",
        "仁愛": "南投縣",
        # 雲林縣
        "雲林": "雲林縣",
        "斗六": "雲林縣",
        "斗南": "雲林縣",
        "虎尾": "雲林縣",
        "西螺": "雲林縣",
        "土庫": "雲林縣",
        "北港": "雲林縣",
        "古坑": "雲林縣",
        # 嘉義市/縣
        "嘉義": "嘉義市",
        "太保": "嘉義縣",
        "朴子": "嘉義縣",
        "布袋": "嘉義縣",
        "大林": "嘉義縣",
        "民雄": "嘉義縣",
        "溪口": "嘉義縣",
        "新港": "嘉義縣",
        "六腳": "嘉義縣",
        "東石": "嘉義縣",
        "義竹": "嘉義縣",
        "鹿草": "嘉義縣",
        "水上": "嘉義縣",
        "中埔": "嘉義縣",
        "竹崎": "嘉義縣",
        "梅山": "嘉義縣",
        "番路": "嘉義縣",
        "大埔": "嘉義縣",
        "阿里山": "嘉義縣",
        # 台南市
        "台南": "臺南市",
        "臺南": "臺南市",
        "新營": "臺南市",
        "永康": "臺南市",
        "歸仁": "臺南市",
        "佳里": "臺南市",
        "麻豆": "臺南市",
        "新化": "臺南市",
        "善化": "臺南市",
        "新市": "臺南市",
        "安定": "臺南市",
        "仁德": "臺南市",
        "關廟": "臺南市",
        "龍崎": "臺南市",
        "官田": "臺南市",
        "六甲": "臺南市",
        "大內": "臺南市",
        "柳營": "臺南市",
        "鹽水": "臺南市",
        "白河": "臺南市",
        "東山": "臺南市",
        "後壁": "臺南市",
        "下營": "臺南市",
        "學甲": "臺南市",
        "西港": "臺南市",
        "七股": "臺南市",
        "將軍": "臺南市",
        "北門": "臺南市",
        # 高雄市
        "高雄": "高雄市",
        "鳳山": "高雄市",
        "岡山": "高雄市",
        "旗山": "高雄市",
        "美濃": "高雄市",
        "橋頭": "高雄市",
        "燕巢": "高雄市",
        "田寮": "高雄市",
        "阿蓮": "高雄市",
        "路竹": "高雄市",
        "湖內": "高雄市",
        "茄萣": "高雄市",
        "永安": "高雄市",
        "彌陀": "高雄市",
        "梓官": "高雄市",
        "大社": "高雄市",
        "大樹": "高雄市",
        "大寮": "高雄市",
        "林園": "高雄市",
        "仁武": "高雄市",
        "鳥松": "高雄市",
        "小港": "高雄市",
        "前鎮": "高雄市",
        "旗津": "高雄市",
        "鼓山": "高雄市",
        "鹽埕": "高雄市",
        "左營": "高雄市",
        "楠梓": "高雄市",
        "三民": "高雄市",
        "苓雅": "高雄市",
        "新興": "高雄市",
        "前金": "高雄市",
        "內門": "高雄市",
        "杉林": "高雄市",
        "甲仙": "高雄市",
        "六龜": "高雄市",
        "茂林": "高雄市",
        "桃源": "高雄市",
        "那瑪夏": "高雄市",
        # 屏東縣
        "屏東": "屏東縣",
        "潮州": "屏東縣",
        "東港": "屏東縣",
        "恆春": "屏東縣",
        "萬丹": "屏東縣",
        "長治": "屏東縣",
        "麟洛": "屏東縣",
        "九如": "屏東縣",
        "里港": "屏東縣",
        "鹽埔": "屏東縣",
        "高樹": "屏東縣",
        "萬巒": "屏東縣",
        "內埔": "屏東縣",
        "竹田": "屏東縣",
        "新埤": "屏東縣",
        "枋寮": "屏東縣",
        # 宜蘭縣
        "宜蘭": "宜蘭縣",
        "羅東": "宜蘭縣",
        "蘇澳": "宜蘭縣",
        "頭城": "宜蘭縣",
        "礁溪": "宜蘭縣",
        "壯圍": "宜蘭縣",
        "員山": "宜蘭縣",
        "冬山": "宜蘭縣",
        "五結": "宜蘭縣",
        "三星": "宜蘭縣",
        "大同": "宜蘭縣",
        "南澳": "宜蘭縣",
        # 花蓮縣
        "花蓮": "花蓮縣",
        "鳳林": "花蓮縣",
        "玉里": "花蓮縣",
        "新城": "花蓮縣",
        "吉安": "花蓮縣",
        "壽豐": "花蓮縣",
        "光復": "花蓮縣",
        "豐濱": "花蓮縣",
        "瑞穗": "花蓮縣",
        "富里": "花蓮縣",
        "秀林": "花蓮縣",
        "萬榮": "花蓮縣",
        "卓溪": "花蓮縣",
        # 台東縣
        "台東": "臺東縣",
        "臺東": "臺東縣",
        "成功": "臺東縣",
        "關山": "臺東縣",
        "卑南": "臺東縣",
        "鹿野": "臺東縣",
        "池上": "臺東縣",
        "東河": "臺東縣",
        "長濱": "臺東縣",
        "太麻里": "臺東縣",
        "大武": "臺東縣",
        "綠島": "臺東縣",
        # 澎湖縣
        "澎湖": "澎湖縣",
        "馬公": "澎湖縣",
        "湖西": "澎湖縣",
        "白沙": "澎湖縣",
        "西嶼": "澎湖縣",
        "望安": "澎湖縣",
        "七美": "澎湖縣",
        # 金門縣
        "金門": "金門縣",
        "金城": "金門縣",
        "金湖": "金門縣",
        "金沙": "金門縣",
        "金寧": "金門縣",
        "烈嶼": "金門縣",
        # 連江縣（馬祖）
        "連江": "連江縣",
        "南竿": "連江縣",
        "北竿": "連江縣",
        "莒光": "連江縣",
        "東引": "連江縣",
    }

    return cwa_location_map.get(city_name, city_name)


def get_cwa_weather_forecast(city_name: str, days: int = 7) -> Optional[List[Dict]]:
    """
    使用中央氣象署 API 取得天氣預報（台灣專用，最準確）

    Args:
        city_name: 城市名稱
        days: 預報天數（1 天或 7 天）

    Returns:
        天氣資訊列表
    """
    if not CWA_API_KEY:
        print("⚠️ 未設定中央氣象署 API 金鑰，請至 https://opendata.cwa.gov.tw/ 申請")
        return None

    location_name = get_cwa_location_name(city_name)
    if not location_name:
        print(f"❌ 找不到 {city_name} 的對應縣市")
        return None

    try:
        # 根據天數選擇不同的 API
        if days <= 2:
            # 使用「一般天氣預報-今明 36 小時天氣預報」
            api_id = "F-C0032-001"
        else:
            # 使用「一般天氣預報-未來一週天氣預報」
            api_id = "F-D0047-091"  # 這個 API 提供 7 天預報

        url = f"https://opendata.cwa.gov.tw/api/v1/rest/datastore/{api_id}"
        params = {
            "Authorization": CWA_API_KEY,
            "locationName": location_name,
        }

        response = requests.get(url, params=params, timeout=15)
        response.raise_for_status()
        data = response.json()

        if data.get("success") != "true":
            raise Exception(f"API 回應失敗: {data.get('message', '未知錯誤')}")

        # 解析天氣資料
        weather_list = []

        if api_id == "F-C0032-001":
            # 36 小時預報格式
            weather_list = parse_cwa_36h_data(data, days)
        else:
            # 一週預報格式
            weather_list = parse_cwa_7d_data(data, days)

        return weather_list[:days]

    except requests.exceptions.RequestException as e:
        print(f"❌ 中央氣象署 API 請求失敗：{e}")
        return None
    except Exception as e:
        print(f"❌ 處理氣象資料失敗：{e}")
        return None


def parse_cwa_36h_data(data: dict, days: int) -> List[Dict]:
    """解析中央氣象署 36 小時預報資料"""
    weather_list = []

    try:
        locations = data["records"]["location"]
        if not locations:
            return []

        weather_elements = locations[0]["weatherElement"]

        # 找出各項資料
        wx_element = next(
            (e for e in weather_elements if e["elementName"] == "Wx"), None
        )
        pop_element = next(
            (e for e in weather_elements if e["elementName"] == "PoP"), None
        )
        min_t_element = next(
            (e for e in weather_elements if e["elementName"] == "MinT"), None
        )
        max_t_element = next(
            (e for e in weather_elements if e["elementName"] == "MaxT"), None
        )

        if not all([wx_element, pop_element, min_t_element, max_t_element]):
            return []

        # 整理每個時段的資料
        time_periods = len(wx_element["time"])
        daily_data = {}

        for i in range(time_periods):
            start_time = wx_element["time"][i]["startTime"]
            date_str = start_time.split(" ")[0]

            if date_str not in daily_data:
                daily_data[date_str] = {
                    "temps_max": [],
                    "temps_min": [],
                    "descriptions": [],
                    "rain_probs": [],
                }

            daily_data[date_str]["descriptions"].append(
                wx_element["time"][i]["parameter"]["parameterName"]
            )
            daily_data[date_str]["rain_probs"].append(
                float(pop_element["time"][i]["parameter"]["parameterName"])
            )
            daily_data[date_str]["temps_min"].append(
                float(min_t_element["time"][i]["parameter"]["parameterName"])
            )
            daily_data[date_str]["temps_max"].append(
                float(max_t_element["time"][i]["parameter"]["parameterName"])
            )

        # 整理成每日資料
        for date_str in sorted(daily_data.keys()):
            day_info = daily_data[date_str]
            weather_list.append(
                {
                    "date": date_str,
                    "temp_max": max(day_info["temps_max"]),
                    "temp_min": min(day_info["temps_min"]),
                    "description": day_info["descriptions"][0],
                    "rain_probability": max(day_info["rain_probs"]),
                }
            )

        return weather_list

    except Exception as e:
        print(f"解析 36 小時資料失敗：{e}")
        return []


def parse_cwa_7d_data(data: dict, days: int) -> List[Dict]:
    """解析中央氣象署一週預報資料"""
    weather_list = []

    try:
        locations = data["records"]["locations"][0]["location"]
        if not locations:
            return []

        # 取得第一個符合的地點
        location_data = locations[0]
        weather_elements = location_data["weatherElement"]

        # 找出各項資料
        wx_element = next(
            (e for e in weather_elements if e["elementName"] == "WeatherDescription"),
            None,
        )
        if not wx_element:
            wx_element = next(
                (e for e in weather_elements if e["elementName"] == "Wx"), None
            )

        t_element = next((e for e in weather_elements if e["elementName"] == "T"), None)
        pop_element = next(
            (e for e in weather_elements if e["elementName"] == "PoP12h"), None
        )

        if not wx_element or not t_element:
            print("找不到必要的天氣元素")
            return []

        # 整理資料
        daily_data = {}

        for time_data in t_element["time"]:
            date_str = time_data["startTime"].split(" ")[0]
            temp = float(time_data["elementValue"][0]["value"])

            if date_str not in daily_data:
                daily_data[date_str] = {
                    "temps": [],
                    "description": "",
                    "rain_prob": 0,
                }

            daily_data[date_str]["temps"].append(temp)

        # 加入天氣描述
        for time_data in wx_element["time"]:
            date_str = time_data["startTime"].split(" ")[0]
            if date_str in daily_data and not daily_data[date_str]["description"]:
                daily_data[date_str]["description"] = time_data["elementValue"][0][
                    "value"
                ]

        # 加入降雨機率
        if pop_element:
            for time_data in pop_element["time"]:
                date_str = time_data["startTime"].split(" ")[0]
                if date_str in daily_data:
                    value = time_data["elementValue"][0]["value"]
                    if value and value != " ":
                        daily_data[date_str]["rain_prob"] = max(
                            daily_data[date_str]["rain_prob"], float(value)
                        )

        # 整理成標準格式
        for date_str in sorted(daily_data.keys())[:days]:
            day_info = daily_data[date_str]
            if day_info["temps"]:
                weather_list.append(
                    {
                        "date": date_str,
                        "temp_max": max(day_info["temps"]),
                        "temp_min": min(day_info["temps"]),
                        "description": day_info["description"] or "多雲",
                        "rain_probability": day_info["rain_prob"],
                    }
                )

        return weather_list

    except Exception as e:
        print(f"解析一週資料失敗：{e}")
        import traceback

        traceback.print_exc()
        return []


def get_weather_forecast(city_name: str, days: int = 7) -> Optional[List[Dict]]:
    """
    取得指定城市的天氣預報

    Args:
        city_name: 城市名稱
        days: 預報天數（最多 7 天）

    Returns:
        天氣資訊列表，每個元素包含：
        - date: 日期
        - temp_max: 最高溫（°C）
        - temp_min: 最低溫（°C）
        - description: 天氣描述
        - rain_probability: 降雨機率（%）
    """
    # 限制最多 7 天
    if days > 7:
        days = 7
        print(f"⚠️ 天氣預報最多提供 7 天")

    # 優先使用中央氣象署 API（台灣地區最準確）
    if CWA_API_KEY:
        cwa_result = get_cwa_weather_forecast(city_name, days)
        if cwa_result:
            print(f"✅ 使用中央氣象署資料")
            return cwa_result
        else:
            print("⚠️ 中央氣象署 API 失敗，改用 OpenWeatherMap")

    # 降級使用 OpenWeatherMap
    if not OPENWEATHER_API_KEY:
        # 如果沒有 API Key，返回模擬資料
        print("⚠️ 無可用 API，使用模擬資料")
        return get_mock_weather(city_name, days)

    coords = get_coordinates(city_name)
    if not coords:
        return None

    lat, lon = coords

    try:
        # 使用 OpenWeatherMap One Call API 3.0 (免費版)
        # 註：免費版只提供 8 天預報
        url = "https://api.openweathermap.org/data/2.5/forecast"
        params = {
            "lat": lat,
            "lon": lon,
            "appid": OPENWEATHER_API_KEY,
            "units": "metric",  # 使用攝氏溫度
            "lang": "zh_tw",
        }

        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()

        # 處理每日天氣資料
        daily_weather = {}
        for item in data.get("list", []):
            date_str = datetime.fromtimestamp(item["dt"]).strftime("%Y-%m-%d")

            if date_str not in daily_weather:
                daily_weather[date_str] = {
                    "date": date_str,
                    "temp_max": item["main"]["temp_max"],
                    "temp_min": item["main"]["temp_min"],
                    "description": item["weather"][0]["description"],
                    "rain_probability": item.get("pop", 0) * 100,
                    "temps": [item["main"]["temp"]],
                }
            else:
                daily_weather[date_str]["temp_max"] = max(
                    daily_weather[date_str]["temp_max"], item["main"]["temp_max"]
                )
                daily_weather[date_str]["temp_min"] = min(
                    daily_weather[date_str]["temp_min"], item["main"]["temp_min"]
                )
                daily_weather[date_str]["temps"].append(item["main"]["temp"])
                daily_weather[date_str]["rain_probability"] = max(
                    daily_weather[date_str]["rain_probability"],
                    item.get("pop", 0) * 100,
                )

        # 轉換為列表並排序
        weather_list = sorted(daily_weather.values(), key=lambda x: x["date"])

        # 移除 temps 欄位
        for item in weather_list:
            item.pop("temps", None)

        return weather_list[:days]

    except Exception as e:
        print(f"取得天氣資料失敗：{e}")
        return get_mock_weather(city_name, days)


def get_mock_weather(city_name: str, days: int = 7) -> List[Dict]:
    """
    產生模擬天氣資料（當無 API Key 或 API 失敗時使用）
    """
    weather_list = []
    today = datetime.now()

    for i in range(days):
        date = today + timedelta(days=i)
        weather_list.append(
            {
                "date": date.strftime("%Y-%m-%d"),
                "temp_max": 25 + (i % 5),
                "temp_min": 18 + (i % 3),
                "description": ["晴天", "多雲", "陰天", "小雨", "晴"][i % 5],
                "rain_probability": [10, 30, 50, 80, 5][i % 5],
            }
        )

    return weather_list


def format_weather_display(weather_data: List[Dict], city_name: str = "") -> str:
    """
    格式化天氣資訊顯示
    """
    if not weather_data:
        return f"{city_name} - 無法取得天氣資訊"

    output = f"### 📍 {city_name} 天氣預報\n\n"

    for day in weather_data:
        date_obj = datetime.strptime(day["date"], "%Y-%m-%d")
        weekday = ["週一", "週二", "週三", "週四", "週五", "週六", "週日"][
            date_obj.weekday()
        ]

        # 取得穿搭建議
        suggestion = get_temperature_suggestion(day["temp_max"], day["temp_min"])

        output += f"**{day['date']} ({weekday})**\n"
        output += f"- 🌡️ 溫度：{day['temp_min']:.0f}°C ~ {day['temp_max']:.0f}°C\n"
        output += f"- ☁️ 天氣：{day['description']}\n"
        output += f"- 🌧️ 降雨機率：{day['rain_probability']:.0f}%\n"
        output += f"- 👔 穿搭建議：{suggestion}\n\n"

    return output


def get_temperature_suggestion(temp_max: float, temp_min: float) -> str:
    """
    根據溫度提供穿搭建議
    """
    avg_temp = (temp_max + temp_min) / 2

    if avg_temp >= 30:
        return "🔥 炎熱天氣，建議穿著短袖、短褲，注意防曬"
    elif avg_temp >= 25:
        return "☀️ 溫暖天氣，適合穿著輕薄衣物"
    elif avg_temp >= 20:
        return "🌤️ 舒適天氣，可穿著長袖或搭配薄外套"
    elif avg_temp >= 15:
        return "🍂 涼爽天氣，建議穿著外套或毛衣"
    elif avg_temp >= 10:
        return "❄️ 寒冷天氣，需要穿著厚外套保暖"
    else:
        return "🧊 非常寒冷，建議多層穿搭並注意保暖"


if __name__ == "__main__":
    # 測試天氣 API
    print("=" * 60)
    print("測試中央氣象署天氣 API")
    print("=" * 60)

    # 測試 7 天預報
    print("\n【測試 1】泰山 7 天預報")
    print("-" * 60)
    weather = get_weather_forecast("泰山", 7)
    if weather:
        print(format_weather_display(weather, "泰山"))
    else:
        print("❌ 無法取得天氣資料")

    # 測試不同城市
    print("\n【測試 2】台北 7 天預報")
    print("-" * 60)
    weather = get_weather_forecast("台北", 7)
    if weather:
        print(format_weather_display(weather, "台北"))
    else:
        print("❌ 無法取得天氣資料")

    # 測試 2 天預報（36 小時格式）
    print("\n【測試 3】高雄 2 天預報（36 小時格式）")
    print("-" * 60)
    weather = get_weather_forecast("高雄", 2)
    if weather:
        print(format_weather_display(weather, "高雄"))
    else:
        print("❌ 無法取得天氣資料")

    print("\n" + "=" * 60)
    print("測試完成！")
    print("=" * 60)
